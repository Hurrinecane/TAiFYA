using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace TAiFYA
{
    public class Analizator
    {
        public struct row
        {
            public string lexeme;
            public string type;
        }

        public string Output;
        public row[] table = new row[500];

        public void Analyze(string Input)
        {
            Input += '\0';
            bool bLexeme = false;
            int NumOfLex = 0;
            string tmplex = "";

            for (int i = 0; i <= Input.Length; i++)
            {
                char tmp = Input[i];
                if (tmp == ' ' || tmp == '\r' || tmp == '+' || tmp == '-' || tmp == '/' || tmp == '*' || tmp == '=' || tmp == '(' || tmp == ')' || tmp == '^' || tmp == ';' || tmp == ':' || tmp == '\0' || tmp == '\n')
                {
#pragma region MyRegion
                    if (bLexeme)
                    {
                        bLexeme = false;
                        int check = -1;
                        for (int j = 0; j < NumOfLex; j++) //проверка на повторение
                            if (table[j].lexeme == tmplex)
                            {
                                check = j;
                                break;
                            }
                        if (check == -1)
                        {
                            table[NumOfLex].lexeme = tmplex;
                            NumOfLex++;
                            tmplex = "";
                            Output = Output + "<lex" + NumOfLex + ">";
                        }
                        else
                        {
                            tmplex = "";
                            Output = Output + "<lex" + check + ">";
                        }
                    }
#pragma endregion
#pragma region :=
                    if (tmp == ':' && Input[i + 1] == '=')
                    {
                        i++;
                        int check = -1;
                        for (int j = 0; j < NumOfLex; j++)
                            if (table[j].lexeme == ":=")
                            {
                                check = j;
                                break;
                            }
                        if (check == -1)
                        {
                            table[NumOfLex].lexeme = ":=";
                            NumOfLex++;

                            Output = Output + "<lex" + NumOfLex + ">";
                        }
                        else
                        {
                            tmplex = "";
                            check++;
                            Output = Output + "<lex" + check + ">";
                        }
                    }
#pragma endregion
                    else
                        if (tmp != ' ' && tmp != '\r')
                        Output += tmp;
                    if (tmp == '\0')
                        break;
                }
                else
                {
                    /*true || false || and || or || xor || not*/
                    if (tmp == 't' || tmp == 'f' || tmp == 'a' || tmp == 'o' || tmp == 'x' || tmp == 'n')
                    {
                        string s = "";
                        switch (tmp)
                        {
                            case 't':
                                s = "true";
                                break;
                            case 'f':
                                s = "false";
                                break;
                            case 'a':
                                s = "and";
                                break;
                            case 'o':
                                s = "or";
                                break;
                            case 'x':
                                s = "xor";
                                break;
                            case 'n':
                                s = "not";
                                break;
                        }
#pragma region MyRegion
                        if (s.Length != 0)
                            if (Input.Length >= i + s.Length)
                            {
                                int temp;
                                bool check = true;
                                for (temp = 0; temp < s.Length; temp++)
                                {
                                    if (Input[i + temp] != s[temp])
                                        check = false;
                                }
                                if (check)
                                {
                                    i += temp - 1;
                                    int check1 = -1;
                                    for (int j = 0; j < NumOfLex; j++)
                                        if (table[j].lexeme == s)
                                        {
                                            check1 = j;
                                            break;
                                        }
                                    if (check1 == -1)
                                    {
                                        table[NumOfLex].lexeme = s;

                                        NumOfLex++;

                                        Output = Output + "<lex" + NumOfLex + ">";
                                    }
                                    else
                                    {
                                        tmplex = "";
                                        check1++;
                                        Output = Output + "<lex" + check1 + ">";
                                    }
                                }
                                else
                                {
                                    bLexeme = true;
                                    tmplex += tmp;
                                }
                            }
#pragma endregion
                    }

                    else
                    {
                        bLexeme = true;
                        tmplex += tmp;
                    }
                }
            }
        }


    }
}
